// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: afsworld.proto
#ifndef GRPC_afsworld_2eproto__INCLUDED
#define GRPC_afsworld_2eproto__INCLUDED

#include "afsworld.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace afsworld {

class AfsWorldService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendText(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::afsworld::StringMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::StringMessage>> AsyncSendText(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::StringMessage>>(AsyncSendTextRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadDir(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::afsworld::ReadDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadDirResponse>> AsyncReadDir(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadDirResponse>>(AsyncReadDirRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAttr(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::afsworld::GetAttrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetAttrResponse>> AsyncGetAttr(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetAttrResponse>>(AsyncGetAttrRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenFile(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::afsworld::OpenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::OpenResponse>> AsyncOpenFile(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::OpenResponse>>(AsyncOpenFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::afsworld::ReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::afsworld::WriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status MkDir(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::afsworld::MkDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkDirResponse>> AsyncMkDir(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkDirResponse>>(AsyncMkDirRaw(context, request, cq));
    }
    virtual ::grpc::Status RmDir(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::afsworld::RmDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RmDirResponse>> AsyncRmDir(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RmDirResponse>>(AsyncRmDirRaw(context, request, cq));
    }
    virtual ::grpc::Status AccessFile(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::afsworld::AccessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::AccessResponse>> AsyncAccessFile(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::AccessResponse>>(AsyncAccessFileRaw(context, request, cq));
    }
    virtual ::grpc::Status MkNod(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::afsworld::MkNodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkNodResponse>> AsyncMkNod(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkNodResponse>>(AsyncMkNodRaw(context, request, cq));
    }
    virtual ::grpc::Status UTime(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::afsworld::UTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UTimeResponse>> AsyncUTime(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UTimeResponse>>(AsyncUTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status Unlink(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::afsworld::UnlinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UnlinkResponse>> AsyncUnlink(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UnlinkResponse>>(AsyncUnlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFile(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::afsworld::GetFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetFileResponse>>(AsyncGetFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFullFile(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::afsworld::WriteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteFileResponse>> AsyncWriteFullFile(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteFileResponse>>(AsyncWriteFullFileRaw(context, request, cq));
    }
    virtual ::grpc::Status RenameFile(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::afsworld::RenameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RenameResponse>> AsyncRenameFile(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RenameResponse>>(AsyncRenameFileRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::StringMessage>* AsyncSendTextRaw(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadDirResponse>* AsyncReadDirRaw(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetAttrResponse>* AsyncGetAttrRaw(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::OpenResponse>* AsyncOpenFileRaw(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::ReadResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkDirResponse>* AsyncMkDirRaw(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RmDirResponse>* AsyncRmDirRaw(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::AccessResponse>* AsyncAccessFileRaw(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::MkNodResponse>* AsyncMkNodRaw(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UTimeResponse>* AsyncUTimeRaw(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::UnlinkResponse>* AsyncUnlinkRaw(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::WriteFileResponse>* AsyncWriteFullFileRaw(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsworld::RenameResponse>* AsyncRenameFileRaw(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status SendText(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::afsworld::StringMessage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::StringMessage>> AsyncSendText(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::StringMessage>>(AsyncSendTextRaw(context, request, cq));
    }
    ::grpc::Status ReadDir(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::afsworld::ReadDirResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::ReadDirResponse>> AsyncReadDir(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::ReadDirResponse>>(AsyncReadDirRaw(context, request, cq));
    }
    ::grpc::Status GetAttr(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::afsworld::GetAttrResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::GetAttrResponse>> AsyncGetAttr(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::GetAttrResponse>>(AsyncGetAttrRaw(context, request, cq));
    }
    ::grpc::Status OpenFile(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::afsworld::OpenResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::OpenResponse>> AsyncOpenFile(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::OpenResponse>>(AsyncOpenFileRaw(context, request, cq));
    }
    ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::afsworld::ReadResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::ReadResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::ReadResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::afsworld::WriteResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::WriteResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::WriteResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    ::grpc::Status MkDir(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::afsworld::MkDirResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::MkDirResponse>> AsyncMkDir(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::MkDirResponse>>(AsyncMkDirRaw(context, request, cq));
    }
    ::grpc::Status RmDir(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::afsworld::RmDirResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::RmDirResponse>> AsyncRmDir(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::RmDirResponse>>(AsyncRmDirRaw(context, request, cq));
    }
    ::grpc::Status AccessFile(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::afsworld::AccessResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::AccessResponse>> AsyncAccessFile(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::AccessResponse>>(AsyncAccessFileRaw(context, request, cq));
    }
    ::grpc::Status MkNod(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::afsworld::MkNodResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::MkNodResponse>> AsyncMkNod(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::MkNodResponse>>(AsyncMkNodRaw(context, request, cq));
    }
    ::grpc::Status UTime(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::afsworld::UTimeResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::UTimeResponse>> AsyncUTime(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::UTimeResponse>>(AsyncUTimeRaw(context, request, cq));
    }
    ::grpc::Status Unlink(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::afsworld::UnlinkResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::UnlinkResponse>> AsyncUnlink(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::UnlinkResponse>>(AsyncUnlinkRaw(context, request, cq));
    }
    ::grpc::Status GetFile(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::afsworld::GetFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::GetFileResponse>>(AsyncGetFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFullFile(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::afsworld::WriteFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::WriteFileResponse>> AsyncWriteFullFile(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::WriteFileResponse>>(AsyncWriteFullFileRaw(context, request, cq));
    }
    ::grpc::Status RenameFile(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::afsworld::RenameResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::RenameResponse>> AsyncRenameFile(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsworld::RenameResponse>>(AsyncRenameFileRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::afsworld::StringMessage>* AsyncSendTextRaw(::grpc::ClientContext* context, const ::afsworld::StringMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::ReadDirResponse>* AsyncReadDirRaw(::grpc::ClientContext* context, const ::afsworld::ReadDirMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::GetAttrResponse>* AsyncGetAttrRaw(::grpc::ClientContext* context, const ::afsworld::GetAttrRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::OpenResponse>* AsyncOpenFileRaw(::grpc::ClientContext* context, const ::afsworld::OpenRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::ReadResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::afsworld::ReadRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::WriteResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::afsworld::WriteRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::MkDirResponse>* AsyncMkDirRaw(::grpc::ClientContext* context, const ::afsworld::MkDirRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::RmDirResponse>* AsyncRmDirRaw(::grpc::ClientContext* context, const ::afsworld::RmDirRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::AccessResponse>* AsyncAccessFileRaw(::grpc::ClientContext* context, const ::afsworld::AccessRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::MkNodResponse>* AsyncMkNodRaw(::grpc::ClientContext* context, const ::afsworld::MkNodRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::UTimeResponse>* AsyncUTimeRaw(::grpc::ClientContext* context, const ::afsworld::UTimeRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::UnlinkResponse>* AsyncUnlinkRaw(::grpc::ClientContext* context, const ::afsworld::UnlinkRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::afsworld::GetFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::WriteFileResponse>* AsyncWriteFullFileRaw(::grpc::ClientContext* context, const ::afsworld::WriteFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::afsworld::RenameResponse>* AsyncRenameFileRaw(::grpc::ClientContext* context, const ::afsworld::RenameRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SendText_;
    const ::grpc::RpcMethod rpcmethod_ReadDir_;
    const ::grpc::RpcMethod rpcmethod_GetAttr_;
    const ::grpc::RpcMethod rpcmethod_OpenFile_;
    const ::grpc::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::RpcMethod rpcmethod_WriteFile_;
    const ::grpc::RpcMethod rpcmethod_MkDir_;
    const ::grpc::RpcMethod rpcmethod_RmDir_;
    const ::grpc::RpcMethod rpcmethod_AccessFile_;
    const ::grpc::RpcMethod rpcmethod_MkNod_;
    const ::grpc::RpcMethod rpcmethod_UTime_;
    const ::grpc::RpcMethod rpcmethod_Unlink_;
    const ::grpc::RpcMethod rpcmethod_GetFile_;
    const ::grpc::RpcMethod rpcmethod_WriteFullFile_;
    const ::grpc::RpcMethod rpcmethod_RenameFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendText(::grpc::ServerContext* context, const ::afsworld::StringMessage* request, ::afsworld::StringMessage* response);
    virtual ::grpc::Status ReadDir(::grpc::ServerContext* context, const ::afsworld::ReadDirMessage* request, ::afsworld::ReadDirResponse* response);
    virtual ::grpc::Status GetAttr(::grpc::ServerContext* context, const ::afsworld::GetAttrRequest* request, ::afsworld::GetAttrResponse* response);
    virtual ::grpc::Status OpenFile(::grpc::ServerContext* context, const ::afsworld::OpenRequest* request, ::afsworld::OpenResponse* response);
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::afsworld::ReadRequest* request, ::afsworld::ReadResponse* response);
    virtual ::grpc::Status WriteFile(::grpc::ServerContext* context, const ::afsworld::WriteRequest* request, ::afsworld::WriteResponse* response);
    virtual ::grpc::Status MkDir(::grpc::ServerContext* context, const ::afsworld::MkDirRequest* request, ::afsworld::MkDirResponse* response);
    virtual ::grpc::Status RmDir(::grpc::ServerContext* context, const ::afsworld::RmDirRequest* request, ::afsworld::RmDirResponse* response);
    virtual ::grpc::Status AccessFile(::grpc::ServerContext* context, const ::afsworld::AccessRequest* request, ::afsworld::AccessResponse* response);
    virtual ::grpc::Status MkNod(::grpc::ServerContext* context, const ::afsworld::MkNodRequest* request, ::afsworld::MkNodResponse* response);
    virtual ::grpc::Status UTime(::grpc::ServerContext* context, const ::afsworld::UTimeRequest* request, ::afsworld::UTimeResponse* response);
    virtual ::grpc::Status Unlink(::grpc::ServerContext* context, const ::afsworld::UnlinkRequest* request, ::afsworld::UnlinkResponse* response);
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::afsworld::GetFileRequest* request, ::afsworld::GetFileResponse* response);
    virtual ::grpc::Status WriteFullFile(::grpc::ServerContext* context, const ::afsworld::WriteFileRequest* request, ::afsworld::WriteFileResponse* response);
    virtual ::grpc::Status RenameFile(::grpc::ServerContext* context, const ::afsworld::RenameRequest* request, ::afsworld::RenameResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    std::unique_ptr< ::grpc::RpcService> service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestSendText(::grpc::ServerContext* context, ::afsworld::StringMessage* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::StringMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReadDir(::grpc::ServerContext* context, ::afsworld::ReadDirMessage* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::ReadDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetAttr(::grpc::ServerContext* context, ::afsworld::GetAttrRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::GetAttrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestOpenFile(::grpc::ServerContext* context, ::afsworld::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::OpenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReadFile(::grpc::ServerContext* context, ::afsworld::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::ReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestWriteFile(::grpc::ServerContext* context, ::afsworld::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::WriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMkDir(::grpc::ServerContext* context, ::afsworld::MkDirRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::MkDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestRmDir(::grpc::ServerContext* context, ::afsworld::RmDirRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::RmDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestAccessFile(::grpc::ServerContext* context, ::afsworld::AccessRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::AccessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMkNod(::grpc::ServerContext* context, ::afsworld::MkNodRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::MkNodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestUTime(::grpc::ServerContext* context, ::afsworld::UTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::UTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestUnlink(::grpc::ServerContext* context, ::afsworld::UnlinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::UnlinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetFile(::grpc::ServerContext* context, ::afsworld::GetFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::GetFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestWriteFullFile(::grpc::ServerContext* context, ::afsworld::WriteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::WriteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestRenameFile(::grpc::ServerContext* context, ::afsworld::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsworld::RenameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace afsworld


#endif  // GRPC_afsworld_2eproto__INCLUDED
